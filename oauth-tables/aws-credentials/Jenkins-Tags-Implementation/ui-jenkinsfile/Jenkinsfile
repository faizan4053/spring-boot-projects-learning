pipeline {
    agent any
    environment { 
    	KUBECONFIG ='/home/ubuntu/config-ui'
        dockerImage = '' 
        // BRANCH_NAME = env.GIT_BRANCH.replace('productphase-ui/', '')
        REPO_URL='https://tools.publicis.sapient.com/bitbucket/scm/psms/productphase-ui.git'
        ECR_URL = 'https://364768860491.dkr.ecr.us-east-1.amazonaws.com'
		REGISTRY = "eldorado:ui-$BUILD_NUMBER"
		REGISTRY_CREDENTIALS = 'ecr:us-east-1:prod-aws-access'
		IMAGE_PREFIX = '364768860491.dkr.ecr.us-east-1.amazonaws.com'
	}

    stages {

    stage("Release Versions") {
            steps {
                script {
                withCredentials([gitUsernamePassword(credentialsId: 'bitbucket-user-account')]) {
                    def gettags = sh(script:'git ls-remote -t $REPO_URL',returnStdout:true).trim()
                    env.TAGS = gettags.readLines().collect { it.split()[1].replaceAll('refs/tags/', '')}.join("\n")
                    env.RELEASE_SCOPE = input message: 'User input required', ok: 'Release!',
                            parameters: [choice(name: 'RELEASE_SCOPE', choices: env.TAGS, description: 'What is the release version?')]
                    }
                    // env.REGISTRY="eldorado:$DEPLOYMENT_NAME-$RELEASE_SCOPE"
                }

                echo "${env.RELEASE_SCOPE}"
               
            }
        }

	stage('Release Pull')
    {
    	steps{
    		echo "Pulling Branch"
    		withCredentials([gitUsernamePassword(credentialsId: 'bitbucket-user-account',
                 gitToolName: 'git-tool')]) {
  				 sh 'git clone --depth 1 --branch $RELEASE_SCOPE $REPO_URL .'
			}
    	}
    }
	
	stage('Install')
	{
	   steps{
		   echo 'installing npm dependencies'
           // echo env.GIT_BRANCH
           sh '''
           		npm install'''
	    }
	}
	
	stage('Test')
	{
		steps{
			sh '''
			npm run test
			'''
		}
	}

	stage('Code Coverage')
	{
		steps{
			sh '''
			npm run coverage
			'''
		}
	}

	// stage('Sonarqube')
	// {
	// 	steps{
	// 			withSonarQubeEnv('sonarqube') {
	// 			sh "npm run sonar"
	// 		}
	// 	}
	// }
	

 //    stage('Building our image') 
 //    { 

 //        steps { 
 //        		sh '''npm run build'''
 //                script { 
 //                    dockerImage = docker.build(REGISTRY)
 //                }
 //            } 
 //    }



	// stage('Push Image') 
	// {
	// 	steps {
 //        	script { 
 //                    docker.withRegistry( ECR_URL, registryCredential ) { 
 //                        dockerImage.push() 
 //                    sh "docker image rmi -f $IMAGE_PREFIX/$REGISTRY"
	//                 sh '''docker rmi $(docker images --filter=reference="*ui-*" -q)'''
	//                 }
 //                }
	// 	}
	// }

	// stage('Deploy Image')
	// {	
	// 	steps {
	// 		withAWS(credentials:'prod-aws-access')
 //        		{
	// 			sh ''' 
	// 			kubectl apply -f ui-service.yml -n eldorado
	//             kubectl apply -f ui-deployment.yml -n eldorado
	// 	        kubectl set image deployment/ui-deployment ui=$IMAGE_PREFIX/$REGISTRY -n eldorado''' 
	// 			}
	// 		}
 //    	}
    }
}