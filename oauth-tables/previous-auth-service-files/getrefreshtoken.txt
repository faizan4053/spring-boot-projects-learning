public ResponseEntity<String> getRefreshToken(RefreshTokenDto refreshTokenDto) throws JsonGenerationException, JsonMappingException, IOException {

		String[] chunks = refreshTokenDto.getRefreshToken().split("\\.");

		String header = new String(Base64.decodeBase64(chunks[0]));
		String payload = new String(Base64.decodeBase64(chunks[1]));
		System.out.println(header);
		System.out.println(payload);
		
		Map<String, Object> mapping = new ObjectMapper().readValue(payload,HashMap.class);
		System.out.println(mapping.get("user_name"));
		
		ResponseEntity<String> response = null;
		ObjectMapper objectMapper = new ObjectMapper();
		RestTemplate restTemplate = new RestTemplate();
		MultiValueMap<String, String> body = new LinkedMultiValueMap<>();
		body.add("refresh_token", refreshTokenDto.getRefreshToken());
		body.add("grant_type", "refresh_token");

		String credentials = AuthServiceConstants.CLIENT_ID + ":" + AuthServiceConstants.CLIENT_PASSWORD;
		String encodedCredentials = new String(Base64.encodeBase64(credentials.getBytes()));

		HttpHeaders headers = new HttpHeaders();
		headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
		headers.add("Authorization", "Basic " + encodedCredentials);

		HttpEntity<?> request = new HttpEntity<Object>(body, headers);
		String access_token_url = baseUri + "oauth/token";
		
		try {
			response = restTemplate.exchange(access_token_url, HttpMethod.POST, request, String.class);
		} catch (InvalidTokenException ex) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid token !");
		} catch (HttpClientErrorException ex) {
			Map<String,String> res=new HashMap<>();
			 res.put("error", "invalid_token");
			 res.put("error_description","Invalid refresh token (expired)");
			 String jsonResponse = objectMapper.writeValueAsString(res);
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(jsonResponse);
		}
		
		return response;
	}